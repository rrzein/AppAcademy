Users Controller
New
Make a @user = User.new that you can pass into render :new
Then in the render page by default you can set the default field value to <%= user.something %> for each input field

Create
Why render :new instead of redirect_to?
Dont want to redirect to new_user_url if you fail to save the user
	-If you redirect to, the browser will make a whole new request and go through the actual "new" method in the controller... Won't be able to pass in the existing unsaved user's attributes

To check if password is too short--you can create a custom validator
private

def password_is_long_enough
	if self.password.length < 6
		errors[:password] << "Password is too short"
	end
end
-What you did: posted an :error in the actual validates :password, :length => { :minimum => 6, :error => (something)}

When you do model.errors, you can do any model.errors[:attribute] and it will be an empty array. AKA don't need to initialize the array first.

Should have put the user's name onto the URL page at the beginning
-Refer to the auth spec

Keep only a singular resource of the :session
resource :session
not resources :sessions

Even if the resources is singular, the controller MUST be plural
Controllers must ALWAYS be plural

Might as well put in the CSRF token in every field, since Rails does it by default.

Use the applicationhelper module

Hash has values_at method
values_at => pull out specific values for specific keys

For log-in user,
add a line that says return nil if user.nil? so it doesn't try to verify the password for a nil user

Verify_user could be a class method of the User class--this makes it easier since you have to look up the user, and the user could potentially be nil

Put into the application layout-> the sign in and sign out pages-- the former if current_user.nil, the latter otherwise

Tags and their posts
Instead of calling the tag's post and setting a @post instance variable to redirect to for each tag, you can just call redirect_to post_url(t.post) to go to the post that the tag belonged to

Make use of partials (study up on partials)

For posts,
instead of assigning the user.id as a hidden field in the form
assign it in the controller, because ANYONE can change the id value in the form
so instead of

<input type="hidden" name="post[user_id]" value="<%= current_user.id %>">

In the controller, do

@post = post.new(params[:post])
@post.user_id = current_user.id

MODULE HELPER METHODS are available in the views without having to call them specifically and are available in the controllers if you "include" them
*** Look up on this

***Also look up using partials